Top_5_List = as(Top_5_pred, "list")
Top_5_List
setwd("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03")
############################### Part B  ###############################
library(lsa)    # Latent Semantic Analysis
############################### Part B  ###############################
library(lsa)    # Latent Semantic Analysis
ratings = read.csv("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03/Dataset/ratings.csv")
ratings_transpose = read.csv("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03/Dataset/ratings_transposed.csv")
# convert NA to 0
ratings[is.na(ratings)] <- 0
# convert dataframe to matrix and drop traget col
ratings_mx <- as.matrix(ratings[, -1])
ratings_tra_mx <- as.matrix(ratings_transpose[, -1])
ratings_mx
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
# convert NA to 0
# ratings[is.na(ratings)] <- 0
ratings_transpose[is.na(ratings_transpose)] <- 0
# convert dataframe to matrix and drop traget col
ratings_mx <- as.matrix(ratings[, -1])
ratings_tra_mx <- as.matrix(ratings_transpose[, -1])
ratings_mx
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
library(dplyr)
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
library(dplyr)
# Convert ratings matrix to real rating matrx which makes it dense
ratings_tra_mx = as(ratings_tra_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Convert ratings matrix to real rating matrx which makes it dense
ratings_tra_mx = as(ratings_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
g
# convert NA to 0
ratings[is.na(ratings)] <- 0
ratings_transpose[is.na(ratings_transpose)] <- 0
# convert dataframe to matrix and drop traget col
ratings_mx <- as.matrix(ratings[, -1])
ratings_tra_mx <- as.matrix(ratings_transpose[, -1])
ratings_mx
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
library(dplyr)
# Convert ratings matrix to real rating matrx which makes it dense
ratings_tra_mx = as(ratings_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Convert ratings matrix to real rating matrx which makes it dense
ratings_tra_mx = as(ratings_tra_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
setwd("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03")
############################### Part B  ###############################
library(lsa)    # Latent Semantic Analysis
############################### Part B  ###############################
library(lsa)    # Latent Semantic Analysis
ratings = read.csv("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03/Dataset/ratings.csv")
ratings_transpose = read.csv("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03/Dataset/ratings_transposed.csv")
# convert NA to 0
ratings[is.na(ratings)] <- 0
ratings_transpose[is.na(ratings_transpose)] <- 0
# convert dataframe to matrix and drop traget col
ratings_mx <- as.matrix(ratings[, -1])
ratings_tra_mx <- as.matrix(ratings_transpose[, -1])
ratings_mx
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
library(dplyr)
# Convert ratings matrix to real rating matrx which makes it dense
ratings_tra_mx = as(ratings_tra_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Convert ratings matrix to real rating matrx which makes it dense
ratings_tra_mx = as(ratings_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Convert ratings matrix to real rating matrix which makes it dense
ratings_tra_mx = as(ratings_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
Top_5_List[[2]]
Top_5_List[[1]]
############################### Part B  ###############################
library(lsa)    # Latent Semantic Analysis
############################### Part B  ###############################
library(lsa)    # Latent Semantic Analysis
ratings = read.csv("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03/Dataset/ratings.csv")
ratings_transpose = read.csv("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03/Dataset/ratings_transposed.csv")
# convert NA to 0
# ratings[is.na(ratings)] <- 0
ratings_transpose[is.na(ratings_transpose)] <- 0
# convert dataframe to matrix and drop traget col
ratings_mx <- as.matrix(ratings[, -1])
ratings_tra_mx <- as.matrix(ratings_transpose[, -1])
ratings_mx
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
library(dplyr)
# Convert ratings matrix to real rating matrix which makes it dense
ratings_tra_mx = as(ratings_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
############################### Part B  ###############################
library(lsa)    # Latent Semantic Analysis
ratings = read.csv("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03/Dataset/ratings.csv")
ratings_transpose = read.csv("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03/Dataset/ratings_transposed.csv")
# convert NA to 0
# ratings[is.na(ratings)] <- 0
ratings_transpose[is.na(ratings_transpose)] <- 0
# convert dataframe to matrix and drop traget col
ratings_mx <- as.matrix(ratings[, -1])
ratings_tra_mx <- as.matrix(ratings_transpose[, -1])
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
# Use R to compute the cosine similarity between users.
cosine(ratings_mx)
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
library(dplyr)
# Convert ratings matrix to real rating matrix which makes it dense
ratings_tra_mx = as(ratings_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[5], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=3)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[5], n=3)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=3)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=1)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=3)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Convert ratings matrix to real rating matrix which makes it dense
ratings_tra_mx = as(ratings_tra_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=3)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Convert ratings matrix to real rating matrix which makes it dense
ratings_tra_mx = as(ratings_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=3)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
############################### Part B  ###############################
library(lsa)    # Latent Semantic Analysis
ratings = read.csv("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03/Dataset/ratings.csv")
ratings_transpose = read.csv("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03/Dataset/ratings_transposed.csv")
# convert NA to 0
# ratings[is.na(ratings)] <- 0
ratings_transpose[is.na(ratings_transpose)] <- 0
# convert dataframe to matrix and drop traget col
ratings_mx <- as.matrix(ratings[, -1])
ratings_tra_mx <- as.matrix(ratings_transpose[, -1])
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
library(dplyr)
# Convert ratings matrix to real rating matrix which makes it dense
ratings_tra_mx = as(ratings_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=3)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Convert ratings matrix to real rating matrix which makes it dense
ratings_tra_mx = as(ratings_tra_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=3)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Convert ratings matrix to real rating matrix which makes it dense
ratings_tra_mx = as(ratings_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[4], n=3)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[14], n=3)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[15], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[-1], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[15], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[-1][1], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[-1], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[-1][14], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx, n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[-1], n=2)
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[-1][14], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[-1][14], n=1)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[-1][14], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[-1][14], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
############################### Part B  ###############################
library(lsa)    # Latent Semantic Analysis
ratings = read.csv("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03/Dataset/ratings.csv")
ratings_transpose = read.csv("/media/shehata/Data/DEBI/R_Assignment_03/Assignment_03/Dataset/ratings_transposed.csv")
# convert NA to 0
# ratings[is.na(ratings)] <- 0
ratings_transpose[is.na(ratings_transpose)] <- 0
# convert dataframe to matrix and drop traget col
ratings_mx <- as.matrix(ratings[, -1])
ratings_tra_mx <- as.matrix(ratings_transpose[, -1])
# Use R to compute the cosine similarity between users.
cosine(ratings_tra_mx)
# Use R to compute the cosine similarity between users.
x <- cosine(ratings_tra_mx)
x[,4]
# correlation with EN
corr[,4]
# Use R to compute the cosine similarity between users.
corr <- cosine(ratings_tra_mx)
# correlation with EN
corr[,4]
Top_5_List
# Load libraries
library(arules)
library(arulesViz)
# Read Dataset
trans_df <-read.transactions("/media/shehata/Data/DEBI/Assignment_03/Dataset/transactions.csv",
format = 'basket',
header = TRUE,
sep = ',')
class(trans_df)
inspect(trans_df)
summary(trans_df)
# Generate a plot of the top 10 transactions
itemFrequencyPlot(trans_df, support = 0.1)
itemFrequencyPlot(trans_df, topN = 10)
# set parameters support, confidence, and maxlen levels.
trans_rules_1 <- apriori(trans_df, parameter = list(support = 0.002,
confidence =0.20,
maxlen = 3))
trans_rules_1
# Display the rules, sorted by descending lift value
l <- inspect(sort(trans_rules_1, by = "lift"))
# Display the rules, sorted by descending support value
s <- inspect(sort(trans_rules_1, by = "support"))
trans_rules_2 <- apriori(trans_df, parameter = list(support = 0.002,
confidence =0.20,
maxlen = 2))
# Display the rules, sorted by descending lift value
l <- inspect(sort(trans_rules_2, by = "lift"))
# Display the rules, sorted by descending support value
s <- inspect(sort(trans_rules_2, by = "support"))
############################### Part B  ###############################
library(lsa)    # Latent Semantic Analysis
ratings = read.csv("/media/shehata/Data/DEBI/Assignment_03/Dataset/ratings.csv")
ratings_transpose = read.csv("/media/shehata/Data/DEBI/Assignment_03/Dataset/ratings_transposed.csv")
# convert NA to 0
# ratings[is.na(ratings)] <- 0
ratings_transpose[is.na(ratings_transpose)] <- 0
# convert dataframe to matrix and drop traget col
ratings_mx <- as.matrix(ratings[, -1])
ratings_tra_mx <- as.matrix(ratings_transpose[, -1])
# Use R to compute the cosine similarity between users.
corr <- cosine(ratings_tra_mx)
# correlation with EN
corr[,4]
corr
# correlation with EN
corr[,4]
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
library(dplyr)
# Convert ratings matrix to real rating matrix which makes it dense
ratings_tra_mx = as(ratings_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, ratings_tra_mx[-1][14], n=2)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
setwd("~/Assignment_03")
############################### Part B  ###############################
library(lsa)    # Latent Semantic Analysis
ratings = read.csv("/home/shehata/Assignment_03/Dataset/ratings.csv")
ratings_transpose = read.csv("/home/shehata/Assignment_03/Dataset/ratings_transposed.csv")
# convert NA to 0
ratings[is.na(ratings)] <- 0
ratings_transpose[is.na(ratings_transpose)] <- 0
# convert dataframe to matrix and drop traget col
ratings_mx <- as.matrix(ratings[, -1])
ratings_tra_mx <- as.matrix(ratings_transpose[, -1])
# Use R to compute the cosine similarity between users.
corr <- cosine(ratings_tra_mx)
corr
# correlation with EN
corr[,4]
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
library(dplyr)
library(dplyr)
# Convert ratings matrix to real rating matrix which makes it dense
ratings_tra_mx = as(ratings_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity.
# We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_3_pred = predict(rec_mod, ratings_tra_mx[4], n=3)
#Convert the recommendations to a list
Top_3_List = as(Top_3_pred, "list")
Top_3_List
############################### Part B  ###############################
library(lsa)    # Latent Semantic Analysis
ratings = read.csv("/home/shehata/Assignment_03/Dataset/ratings.csv")
ratings_transpose = read.csv("/home/shehata/Assignment_03/Dataset/ratings_transposed.csv")
# convert NA to 0
# ratings[is.na(ratings)] <- 0
ratings_transpose[is.na(ratings_transpose)] <- 0
# convert dataframe to matrix and drop traget col
ratings_mx <- as.matrix(ratings[, -1])
ratings_tra_mx <- as.matrix(ratings_transpose[, -1])
# Use R to compute the cosine similarity between users.
corr <- cosine(ratings_tra_mx)
corr
# correlation with EN
corr[,4]
###################### 5 ######################
# install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
library(dplyr)
# Convert ratings matrix to real rating matrix which makes it dense
ratings_tra_mx = as(ratings_mx, "realRatingMatrix")
# Create Recommender Model. The parameters are UBCF and Cosine similarity.
# We take 1 nearest neighbours
rec_mod = Recommender(ratings_tra_mx, method = "IBCF", param=list(method="Cosine"))
# Obtain top 5 recommendations for 1st user entry in dataset
Top_3_pred = predict(rec_mod, ratings_tra_mx[4], n=3)
#Convert the recommendations to a list
Top_3_List = as(Top_3_pred, "list")
Top_3_List
